// SPDX-FileCopyrightText: 2024 Infineon Technologies AG
// SPDX-License-Identifier: MIT

pipeline {
  agent {
        label 'bangalore_mac_01'
    }
   environment {
    	LC_CTYPE = 'en_US.UTF-8'
 	PATH = '/opt/homebrew/opt/llvm/bin:/opt/homebrew/bin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/Users/infineon/Library/Application Support/pipx/venvs/reuse/bin/'
  }
  stages {

	stage('clone Dependant Repositories') {
                steps {
                    sh '''
                        current_folder=$(basename "$PWD")  # Store the current folder name in a variable
			cd ..
                        rm -rf optiga-nbt-lib-swift
			git clone ssh://git@bitbucket.vih.infineon.com:7999/csssiv/hsw-nbt2000-swift.git optiga-nbt-lib-swift
                        
			cd $current_folder
			

		       '''
                }
        }
 	stage('InfineonChanneliOSNfc:Clean') {
            steps {
                // Clean build folder
                sh 'swift package clean'

            }
        }
	 stage('InfineonChanneliOSNfc:Reuse Lint') {
            steps {
                // Clean build folder
                sh 'reuse lint'
            }
        }
        
        stage('InfineonChanneliOSNfc:Build') {
            steps {
                // One or more steps need to be included within the steps block.
                sh 'xcodebuild build -scheme InfineonChanneliOSNfc -destination "name=iPhone 15"'
            }
        }
	stage('InfineonChanneliOSNfc: Static code analysis') {
            steps {
		sh '''
		    rm  -rf .build
                    mkdir -p .build/code_analysis_report
 
    		'''
                script{
                    def lintStatus

                    // Run the swiftlint command and capture the status code
                    lintStatus = sh(script: 'swiftlint lint --quiet --reporter "html" > .build/code_analysis_report/static_code_analysis.html Sources/InfineonChanneliOSNfc', returnStatus: true)
    
                    // Check the status code and print a message if there was an error
                    if (lintStatus != 0) {
                         echo "SwiftLint returned a non-zero exit code: ${lintStatus}"
                    }
                }
	 }
	}

      stage('InfineonChanneliOSNfc:Run tests') {
        steps {
          // One or more steps need to be included within the steps block.
            sh '''
		
		mkdir -p .build/test_report
        	xcodebuild test -scheme InfineonChanneliOSNfc -destination "name=iPhone 15" -enableCodeCoverage YES | xcpretty --report junit --output .build/test_report/InfineonChanneliOSNfc_test_summary.xml
		xcodebuild test -scheme InfineonChanneliOSNfc -destination "name=iPhone 15" -derivedDataPath .build/ -enableCodeCoverage YES

		xchtmlreport .build/Logs/Test/*.xcresult


		
            '''
        }
       
      }
	stage('InfineonChanneliOSNfc:Generate code coverage') {
            steps {
                sh '''
			
			mkdir -p .build/coverage_report
			
			
			# Generate HTML code coverage report
			xcrun llvm-cov show -format=html -instr-profile .build/Build/ProfileData/*/Coverage.profdata -ignore-filename-regex ".build|Tests" -use-color .build/Build/Products/Debug-iphonesimulator/InfineonChanneliOSNfcTests.xctest/InfineonChanneliOSNfcTests > .build/coverage_report/coverage_html_report.html
			
			# Generate percentage-based text report
			xcrun llvm-cov report -instr-profile .build/Build/ProfileData/*/Coverage.profdata  -ignore-filename-regex ".build|Tests" .build/Build/Products/Debug-iphonesimulator/InfineonChanneliOSNfcTests.xctest/InfineonChanneliOSNfcTests > .build/coverage_report/coverage_text_report.txt

			# Create the combined HTML report
			cat <<EOF > .build/coverage_report/index.html
			<!DOCTYPE html>
			<html>
			<head>
    				<title>Combined Code Coverage Report</title>
			</head>
			<body>
				<h1><a href="coverage_text_report.txt">Percentage-Based</a> Text Report</h1>

    				<pre> $(cat .build/coverage_report/coverage_text_report.txt)</pre>
    				<h1><a href="coverage_html_report.html">HTML Code Coverage Report</a></h1>
    				<iframe src="coverage_html_report.html" style="width: 100%; height: 600px;"></iframe>
			</body>
			</html>
			EOF
			echo "Combined HTML report generated as coverage_report/combined_report.html"

		  '''
	         }
	}

	stage('InfineonChanneliOSNfc:DocC') {
            steps {
		
		sh '''
		   xcodebuild docbuild -scheme InfineonChanneliOSNfc -destination "name=iPhone 15" -derivedDataPath .build/doc
		   git clone https://github.com/DoccZz/docc2html.git .build/docc2html
		   cd .build/docc2html
	           swift run docc2html ../doc/Build/Products/Debug-iphonesimulator/InfineonChanneliOSNfc.doccarchive ../docshtml
		   cd ../../
		   zip -r InfineonChanneliOSNfc.doccarchive.zip .build/doc/Build/Products/Debug-iphonesimulator/InfineonChanneliOSNfc.doccarchive
		   zip -r InfineonChanneliOSNfcDocument.zip .build/docshtml
		
		'''
	    }
	    post {
             	always {
		   archiveArtifacts artifacts: 'InfineonChanneliOSNfc.doccarchive.zip', allowEmptyArchive: true
		   archiveArtifacts artifacts: 'InfineonChanneliOSNfcDocument.zip', allowEmptyArchive: true
		}
            	
	    }
	}	

	stage('InfineonChanneliOSNfc:Publish Report') {
            steps {
                script {

   		      publishHTML(target: [
                      		allowMissing: false,
                               	alwaysLinkToLastBuild: true,
                       		keepAll: true,
                       		reportDir: '.build/code_analysis_report',
                               	reportFiles: 'static_code_analysis.html',
                              	reportName: 'InfineonChanneliOSNfc:Static Code Analysis Report'
                      ])
  		      publishHTML(target: [
                   		allowMissing: false,
                    		alwaysLinkToLastBuild: true,
                   		reportDir: '.build/Logs/Test/',
                    		reportFiles: 'index.html',
                    		reportName: 'InfineonChanneliOSNfc: Unit Test Report'
                      ])
			
		      publishHTML(target: [
                       		allowMissing: false,
                        	alwaysLinkToLastBuild: true,
                       		keepAll: true,
                        	reportDir: '.build/coverage_report',
                        	reportFiles: 'index.html',
                        	reportName: 'InfineonChanneliOSNfc: Code Coverage Report'
                      ])
		      publishHTML(target: [
                       		allowMissing: false,
                        	alwaysLinkToLastBuild: true,
                       		keepAll: true,
                        	reportDir: '.build/docshtml',
                        	reportFiles: 'documentation/infineonchanneliosnfc/index.html',
                        	reportName: 'InfineonChanneliOSNfc: Documents'
                      ])

 		    junit '.build/test_report/InfineonChanneliOSNfc_test_summary.xml'
		}
            }
        }

    }

}
